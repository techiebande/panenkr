
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
  EDITOR
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum PredictionType {
  ONE_X_TWO
  OVER_UNDER
  BTTS
  HT_FT
  CUSTOM
}

enum PublishStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum MatchStatus {
  SCHEDULED
  LIVE
  FINISHED
  POSTPONED
  CANCELLED
}

enum PredictionResult {
  PENDING    // Match not finished yet
  WON        // Prediction was correct
  LOST       // Prediction was wrong
  VOID       // Match cancelled/void
}

// Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image     String?
  role          UserRole  @default(USER)
  passwordHash  String?
  createdAt     DateTime  @default(now())
  lastSeenAt    DateTime?
  metadata      Json?
  uploadedMedia Media[]
  accounts      Account[]
  sessions      Session[]

  // Relations
  subscriptions Subscription[]
  payments      Payment[]
  predictions   Prediction[] @relation("AuthorPredictions")
  articles      Article[] // ADDED: Relation to articles
}

model Subscription {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  flutterwavePlanId String
  status            SubscriptionStatus @default(ACTIVE)
  currency          String
  amountCents       Int
  interval          String
  startedAt         DateTime
  nextBillingAt     DateTime?
  cancelledAt       DateTime?
  externalMetadata  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Payment {
  id                 String        @id @default(cuid())
  user               User?         @relation(fields: [userId], references: [id])
  userId             String?
  amountCents        Int
  currency           String
  status             PaymentStatus @default(PENDING)
  method             String
  gatewayResponseJson Json
  gatewayProvider    String
  reference          String
  createdAt          DateTime @default(now())
  finishedAt         DateTime?
}

model League {
  id         String  @id @default(cuid())
  name       String
  country    String?
  slug       String  @unique
  externalId String?
  tier       Int?
  createdAt  DateTime @default(now())
  teams Team[]
  matches Match[]
}

model Team {
  id         String  @id @default(cuid())
  name       String
  shortName  String?
  slug       String  @unique
  crestUrl   String?
  externalId String?
  league     League? @relation(fields: [leagueId], references: [id])
  leagueId   String?
  createdAt  DateTime @default(now())
  homeMatches Match[] @relation("homeTeam")
  awayMatches Match[] @relation("awayTeam")
}

model Match {
  id              String      @id @default(cuid())
  externalMatchId String?
  homeTeam        Team        @relation("homeTeam", fields: [homeTeamId], references: [id])
  homeTeamId      String
  awayTeam        Team        @relation("awayTeam", fields: [awayTeamId], references: [id])
  awayTeamId      String
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  kickoffAt       DateTime
  status          MatchStatus @default(SCHEDULED)
  scoreHome       Int?
  scoreAway       Int?
  htScoreHome     Int?        // Half-time score
  htScoreAway     Int?        // Half-time score
  finishedAt      DateTime?   // When match actually ended
  minute          Int?        // Current minute (for live matches)
  oddsJson        Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  predictions     Prediction[]

}

model Prediction {
  id               String           @id @default(cuid())
  title            String
  slug             String           @unique
  author           User             @relation("AuthorPredictions", fields: [authorId], references: [id])
  authorId         String
  match            Match            @relation(fields: [matchId], references: [id])
  matchId          String
  type             PredictionType
  value            String
  confidence       Int
  isPremium        Boolean          @default(false)
  publishStatus    PublishStatus    @default(DRAFT)
  publishedAt      DateTime?
  content          Json          
  // Result tracking
  result           PredictionResult @default(PENDING)
  resultNote       String?          // Explanation of why it won/lost
  evaluatedAt      DateTime?        // When result was determined
  evaluatedBy      String?          // User ID who evaluated
  actualOutcome    String?          // What actually happened
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Article {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  author          User          @relation(fields: [authorId], references: [id])
  authorId        String
  content         Json
  featuredImageId String?
  featuredImage   Media?        @relation(fields: [featuredImageId], references: [id])
  publishStatus   PublishStatus @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tags            Tag[]         @relation("ArticleTags")

  @@index([authorId])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  articles    Article[] @relation("ArticleTags")
}

model Media {
  id         String   @id @default(cuid())
  url        String
  width      Int?
  height     Int?
  mimeType   String?
  uploader   User?    @relation(fields: [uploaderId], references: [id])
  uploaderId String?
  altText    String?
  source     String?
  createdAt  DateTime @default(now())
  articles   Article[]
}

model AdPlacement {
  id          String   @id @default(cuid())
  name        String
  zone        String
  provider    String
  codeSnippet String?
  isActive    Boolean  @default(true)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  createdAt   DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String?
  action     String
  objectType String
  objectId   String?
  beforeJson Json?
  afterJson  Json?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}